#!/usr/bin/env ruby
#
# MIT License
#
# Copyright (c) 2016 Paul Taylor
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

require 'rubygems'
require 'ppool'
require 'optparse'


options = {
    :size => 1,
    :delay => 100,
    :basic => false,
    :logdir => "./ppool-logs",
    :rmlogs => false,
    :timespec => nil
}

$USAGE = "Usage: ppool [options] COMMAND ARGS..."



OptionParser.new do |opts|
  opts.banner = $USAGE

  opts.on('-s', '--size SIZE', 'Initial pool size') { |v| options[:size] = v }
  opts.on('-d', '--delay MSECS', 'The delay between checking the state of the process pool (default 100ms)') { |v| options[:delay] = v }
  opts.on('-t', '--time TIME',  'Time limit') { |v| options[:timespec] = v }
  opts.on('-b', '--basic', 'Basic (non curses) verion') { |v| options[:basic] = true}
  opts.on('-r', '--rmlogs', 'Remove logs for processes that exited successfully') { |v| options[:rmlogs] = true}
  opts.on('-l', '--logdir DIR',  'Log directory') { |v| options[:logdir] = v }

  opts.on("-h", "--help", "Show this message") {
        puts opts
        exit
  }

end.parse!

command = ARGV.join(' ')
if command == ''
  puts $USAGE
  exit(1)
end

logdir = options[:logdir]
if ! Dir.exist?(logdir) 
  Dir.mkdir(logdir)
end

size = options[:size].to_i
delay = options[:delay].to_i

begin
  time = options[:timespec] == nil ? nil : PPool.convert_time_to_secs(options[:timespec])
rescue ArgumentError => e
  puts $USAGE
  puts "error: #{e.message}"
  exit(1)
end

if options[:basic]
  controller = PPool::TerminalProcessController.new(size, delay, command, time, logdir, options[:rmlogs])
else 
  controller = PPool::CursesProcessController.new(size, delay, command, time, logdir, options[:rmlogs])
end

PPool::ProcessPool.new(controller).run

